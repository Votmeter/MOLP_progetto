model Progetto
  ! I commenti sono esclusivamente nelle porzioni di codice non già esaminati in precedenza (diverse dalle procedure già viste) per
  ! non appensantire l'esaminazione e per evitare ridondanza.
  ! Il codice commentanto riguarda principalmente la stampa dei risultati e dei tempi, si trova solitamente alla fine delle procedure
  ! o in punti strategici per l'esecuzione, non viene trattato nelle spiegazione e lo i può testare.
  ! Le procedure nel main possono essere testate in combinazione con le istanze a disposizione (quelle che abbiamo utilizzato per
  ! sviluppare gli algoritmi).
  options noimplicit
  uses "mmxprs", "mmsystem", "mmsvg"
  forward procedure modello_matematico
  forward procedure BPPGP_random                                ! costruttivo random
  forward procedure BPPGP_random_migliorato                     ! costruttivo random migliorato
  forward procedure BPPGP_Euristico_con_pval                    ! costruttivo con criterio basato sul peso degli archi
  forward procedure BPPGP_LS                                    ! Local Search
  forward procedure BPPGP_GRASP                                 ! GRASP
  forward procedure BPPGP_Multistart
  forward procedure BPPGP_Rappresentazione_Grafica
  forward procedure Print_Status

  declarations
    n: integer                                                  ! numero di item
    m: integer                                                  ! numero di bin
    l: integer                                                  ! numero di archi
    c : integer                                                 ! capacità dei bin
    ! inputfile = "Istanze/BPP_progettoMOLP.dat"                ! esempio nel paper
    inputfile = "Istanze/n=100/n=100(1).dat"
  end-declarations

  initialisations from inputfile
    n
    m
    l
    c
  end-initialisations

  declarations
    items = 1..n                                                ! range degli items
    bins = 1..m                                                 ! range dei bins
    archi = 1..l                                                ! range degli archi
    pesi : array(items) of integer                              ! pesi degli items
    partenza : array(archi) of integer                          ! item da cui partono gli archi di precedenza
    arrivo : array(archi) of integer                            ! item a cui arrivano gli di precedenza
    pval : array(archi) of integer                              ! valori sugli archi di precedenza
    t1, t2, tempo, tsingolo : real                              ! variabili per i tempi
    eps = 0.0001                                                ! valore generico piccolo
    max_iter : integer                                          ! numero di iterazioni del Multistart
    solution_status: string                                     ! stato del problema per Print Status
    z : linctr                                                  ! funzione obiettivo
    y: array(bins) of mpvar                                     ! bins aperti
    x: array(bins, items) of mpvar                              ! a che bin appartiene ogni item
    ! soluzioni euristiche
    xeur: array(items) of integer                               ! associa item e numero di bin in cui è inserito
    xbest: array(items) of integer                              ! corrispettivo per Multistart
    zeur : integer                                              ! numero di bin utilizzati
    zbest: integer                                              ! corrispettivo per multistart
  end-declarations

  initialisations from inputfile
    arrivo
    partenza
    pesi
    pval
  end-initialisations

  !!!!!!MAIN!!!!!!!
  max_iter := 5000
  tempo := 0

  ! BPPGP_Euristico_con_pval
  ! BPPGP_random
  BPPGP_random_migliorato
  ! BPPGP_LS
  ! BPPGP_GRASP
  ! BPPGP_Multistart
  setparam("XPRS_MAXTIME", 300)
  ! modello_matematico

  ! Print_Status
  ! BPPGP_Rappresentazione_Grafica
  !!!!!!!!!END MAIN !!!!!!!!!!
  procedure modello_matematico
    z := sum(i in bins) y(i)                                                                  ! (1) funzione obiettivo
    forall (j in items)
      sum(i in bins) x(i, j) = 1                                                              ! (2) ogni item assegnato esattamente ad un bin
    forall (i in bins)
      sum (j in items) pesi(j) * x(i, j) <= c * y(i)                                          ! (3) vincolo di capacità per bin aperto
    forall (u in archi)
      sum (i in bins) i * x (i, arrivo(u)) >= sum(i in bins) (i*x(i, partenza(u))) + pval(u)  ! (4) vincolo sulle relazioni di precedenze
    forall (i in 1..(m-1))
      y(i) >= y (i+1)                                                                         ! (5) bin aperti in ordine
    forall (i in bins)
      y(i) is_binary                                                                          ! (6)
    forall (i in bins, j in items)
      x(i, j) is_binary                                                                       ! (7)
    !Fine del modello matematico
    t1 := gettime
    minimize(z)
    t2 := gettime
    writeln("SOLUZIONE")
    writeln ("\ttempo impiegato = ",t2-t1)
    writeln("\tz = ", getobjval)
    forall(i in bins) do
      if (getsol(y(i)) > eps) then
        writeln("\ty(", i, ") = ",getsol(y(i)))
        forall(j in items)
          if (getsol(x(i,j)) > eps) then
            writeln("\t\tx(",i,", ", j, ") = ", getsol(x(i,j)))
          end-if
      end-if
    end-do
  end-procedure

  procedure BPPGP_random
    declarations
      disp: array(items) of integer             ! item che possono essere inseriti
      sel: array(items) of integer              ! item che sono già stati selezionati
      getdisp : boolean                         ! vero se esistono item che sono disponibili
      controllati: array(items) of integer      ! item in arrivo che sono stati controllati
      check_result: boolean                     ! indica se un item diventa disponibile o no
      indice : integer                          ! variabile che ricorda, durante l'iterazione, l'item che sto selezionando
      fine : boolean                            ! assume valore false quando ho selezionato tutti gli item
      cap : integer                             ! capacità residua del bin corrente
    end-declarations
    t1 := gettime
    ! condizioni necessarie per iniziare l'euristico:
    fine := false
    forall(i in items) sel(i) := 0              ! Nessun item è inizialmente selezionato
    forall(i in items) disp(i) := 1             ! Tutti gli item sono disponibili ->
    forall(i in items) xeur(i):= 0              ! Assegno ad un ipotetico bin 0 tutti gli item nella soluzione euristica
    forall(i in archi) disp(arrivo(i)) := 0     ! Pongo non disponibili gli item che sono arrivi di archi di precedenza
    zeur := 1                                   ! Si parte per forza dal Bin 1
    cap := c                                    ! Il bin (1) aperto ha capacità corrente uguale alla capacità massima
    ! Iniziamo il ciclo esterno, ad ogni iterazione un item viene assegnato ad un bin
    while (not fine) do
      fine := true                              ! Evitiamo che ci si blocchi nel while (se non sono assegnati tutti gli item rimettiamo True -> più avanti)
      getdisp := false
      forall (o in items) do
        if (disp(o) = 1) then                   ! Se ho almeno un item disponibile per la selezione getdisp -> true
          ! write(o, " è disponibile -> ")
          getdisp := true                       ! ->
          break                                 ! Appena trovo un match interrompo il ciclo
        end-if
      end-do
      ! Ciclo che viene percorso solamente in caso di non disponibilità (getdisp = False) -> apre un nuovo bin.
      ! Posso avere problemi di disponibilità causati dal valore sugli archi delle precedenze (pval):
      ! Pur avendo già selezionato tutti gli item necessari, non sono ancora trascorsi sufficienti bin.
      while(not getdisp) do
        forall (i in items) controllati(i) := 0 ! Controllare se (come si spera) qualche item diventa disponibile con l'apertura di un nuovo bin
        zeur += 1                               ! Apro il nuovo Bin
        cap := c                                ! Aggiorno la capacità
        ! writeln("Costretto ad aprire ", zeur, " -> ")
        forall(i in archi) do                   ! Si cicla sugli archi perchè è necessario controllare gli arrivi (degli archi di precedenza)
          if (sel(arrivo(i)) <> 1 and controllati(arrivo(i)) <> 1) then
            ! Devo controllare solamente gli item che non ho precedentemente selezionato / controllato
            check_result := true                ! Inizialmente può essere inserito, se fallisce i controlli no
            forall(h in archi, j in bins) do
              ! Si cicla una seconda volta su archi perchè un item può essere arrivo di diversi archi, tutte le precedenze devono essere verificate
              ! perché l'arrivo diventi disponibile
              if (arrivo(h) = arrivo(i) and (sel(partenza(h)) <> 1 or (xeur(partenza(h)) = j and zeur - pval(h) - j < 0))) then
                ! 1) L'item "arrivo" nel ciclo interno deve coincidere con quello esterno (controllo tutti gli archi)
                ! 2) L'item "partenza" dell'arco è associato ad un bin j (quindi selezionato)
                ! 3) Devono essere passati sufficienti bin da soddisfare la precedenza
                check_result := false
                break
                ! Basta che una di queste condizione venga verificata e l'item non può diventare disponibile
              end-if
            end-do
            if (check_result) then              ! A seconda dell'esito del controllo inserisco tra i disponibili l'item "arrivo"
              disp (arrivo(i)) := 1
              getdisp := true
            end-if
            controllati(arrivo(i)) := 1         ! In ogni caso l'item "arrivo" è stato controllato
          end-if
        end-do
      end-do
      ! Selezioniamo casualmente un item tra quelli disponibili
      while (true) do
        indice := ceil(random * n)
        if(disp(indice) = 1 and sel(indice) = 0) then
          ! write ("Seleziono ", indice, " -> ")
          break
        end-if
      end-do
      ! Aggiornamento della capacità residua del bin
      if (pesi(indice) <= cap) then
        cap -= pesi(indice)
      else                                      ! Se il peso dell'item selezionato eccede la capacità residua del bin corrente
        zeur := zeur + 1                        ! Apro un nuovo bin e aggiorno la capacità
        cap := c - pesi(indice)
      end-if
      ! writeln("Assegno a bin: ", zeur, " (capacità residua: ", cap,")")
      sel(indice) := 1                          ! L'item estratto e assegnato diventa "selezionato"
      disp(indice) := 0                         ! Togliamo la disponibilità dall'item selezionato (non deve essere ri-estratto)
      xeur(indice) := zeur                      ! All'indice dell'item (nell'array della soluzione euristica) è assegnato il numero del bin (coppia item-bin)
      ! Si effettua l'aggiornamento degli item disponibili.
      ! Abbiamo un item in più nell'array selezionati e potenzialmente abbiamo aperto un bin
      forall (i in items) controllati(i) := 0
      forall(i in archi) do
        if (sel(arrivo(i)) <> 1 and controllati(arrivo(i)) <> 1) then
          check_result := true
          forall(h in archi, j in bins) do
            if (arrivo(h) = arrivo(i) and (sel(partenza(h)) <> 1 or (xeur(partenza(h)) = j and zeur - pval(h) - j < 0))) then
              check_result := false
              break
            end-if
          end-do
          if (check_result) then
            disp (arrivo(i)) := 1
          end-if
          controllati(arrivo(i)) := 1
        end-if
      end-do
      ! Se ho ancora degli item non selezionati, devo effettuare un altro ciclo
      forall (i in items)
        if (sel(i) = 0) then
          fine := false
          break
        end-if
    end-do
    t2 := gettime
    tempo := t2-t1
    writeln("****** SOLUZIONE euristico base ******")
    writeln("\tzeur = ",zeur)
    writeln("\ttempo impiegato = ", t2 - t1)
    forall (b in 1..zeur) do
      writeln("\tbin = ", b)
      forall (i in items) do
        if (xeur(i) = b) then
          writeln("\t\tItem: ", i," (peso  = ", pesi(i),")")
        end-if
      end-do
    end-do
  end-procedure

  procedure BPPGP_random_migliorato
    declarations
      disp, sel: array(items) of integer
      indice, cap: integer
      fine : boolean
      closest: integer                                      ! per la selezione dell'item
      hodisp : boolean                                      ! per sapere se aprire un nuovo bin
      nok : array(items) of integer                         ! items che hanno fallito il controllo per diventare disponibili
    end-declarations
    t1 := gettime
    fine := false
    forall(i in items) do
      sel(i) := 0
      disp(i) := 1
      xeur(i):= 0
    end-do
    hodisp := true                                          ! ho degli items disponibili inizialmente
    forall(i in archi) disp(arrivo(i)) := 0
    zeur := 1
    cap := c
    while (not fine) do
      fine := true
      indice := ceil(random * n)
      closest := n + 1                                      ! inizializzo a n+1 un potenziale item più vicino
      ! Seleziono l'item più vicino all'estrazione che ho effettuato
      forall (i in items) do
        if (disp(i) = 1 and sel(i) = 0 and indice - i < closest) then
          ! per poter essere selezionato l'item deve essere disponibile e non selezionato
          closest := indice - i
          indice := i
        end-if
        if (disp(i) = 1 and indice - i >= closest) then
          break
        end-if
      end-do
      ! write ("sel ", indice, " -> ")
      if (pesi(indice) <= cap) then
        cap -= pesi(indice)
      else
        zeur := zeur + 1
        cap := c - pesi(indice)
      end-if
      ! writeln("[bin: ", zeur, " cap: ", cap,"]")
      sel(indice) := 1
      disp(indice) := 0
      xeur(indice) := zeur
      ! Questo è il codice che aggiorna gli items disponibili
      repeat
        if (not hodisp) then                      ! hodisp viene eventualmente aggiornato a fine del ciclo
          zeur += 1                               ! apro un nuovo bin per rendere disponibili nuovi items
          cap := c                                ! resetto la capacità residua
        end-if
        forall (i in items) nok(i):= 0            ! nessuno ha ancora fallito un controllo
        forall(i in archi) do
          ! controllo solamente quelli che non hanno fallito controlli
          if (sel(arrivo(i)) = 0 and sel(partenza(i)) = 1 and nok(arrivo(i)) = 0) then
            forall (j in bins) do
              if (xeur(partenza(i)) = j and zeur - pval(i) - j < 0) then
                ! classici controlli tra bin attuale e bin associato alla partenza
                nok(arrivo(i)) := 1               !si registra quando si fallisce un controllo
                break
                ! una volta che si è superato il bin attuale o già controllato quello di appartenenza si interrompe il ciclo
              elif (xeur(partenza(i)) < j or j > zeur) then
                break
              end-if
            end-do
          else
            nok(arrivo(i)) := 1                   ! anche se si fallisce il controllo iniziale nok = 1
          end-if
        end-do
        hodisp := false                           ! reset di hodisp
        forall (i in items) do
          if (sel(i) = 0 and nok(i) = 0) then
            disp(i) := 1                          ! item non selezionati e che non hanno fallito il controllo diventano disp
          end-if
          if(sel(i) = 0) then
            fine := false                         ! se ho item non selezionati non finisce l'eutistico
            if (disp(i) = 1 and pesi(i) < cap) then
              hodisp := true                      ! se ho ho item disponibili e che possono essere inseriti nel bin corrente hodisp = true
            end-if
          end-if
        end-do
        if (fine) then                            ! se fine è true anche ho disp deve esserlo
          hodisp := true
        end-if
      until hodisp or fine
    end-do
    t2 := gettime
    writeln("##### COSTRUTTIVO RANDOM MIGLIORATO #####")
    writeln("\tzeur = ",zeur)
    tsingolo := t2 - t1
    writeln("\ttempo impiegato = ", t2 - t1)
    forall (b in 1..zeur) do
      writeln("\tbin = ", b)
      forall (i in items) do
        if (xeur(i) = b) then
          writeln("\t\tItem: ", i," (peso  = ", pesi(i),")")
        end-if
      end-do
    end-do
  end-procedure

  procedure BPPGP_Euristico_con_pval
    declarations
      disp, sel, controllati, nok: array(items) of integer
      indice, cap : integer
      fine, hodisp : boolean
      pvalmax : integer                                   ! Variabile per il confronto dei pval tra gli archi di precedenza
      pesomax : integer                                   ! Variabile per il confronto dei pesi tra gli item
    end-declarations
    t1 := gettime
    forall(i in items) do
      sel(i) := 0
      disp(i) := 1
      xeur(i):= 0
    end-do
    forall(i in archi) disp(arrivo(i)) := 0
    zeur := 1
    cap := c
    repeat
      fine := true
      ! Si seleziona un item secondo una specifiche serie di criteri
      indice := 0
      pvalmax := -1                                       ! Viene impostato a -1 perchè esistono anche precedenze con valore 0
      forall (j in archi) do
        ! Attraverso questi confronti si seleziona l'item (disponibile) "partenza" associato all'arco con pval maggiore
        if (disp(partenza(j)) = 1 and sel(partenza(j)) = 0 and pval(j) > pvalmax) then
          ! 1) L'item deve essere disponibile
          ! 2) L'item non deve essere già selezionato
          ! 3) Il pval associato all'arco partente dall'item deve essere maggiore a pvalmax
          ! write ("indice = " ,i, ", pval = ", pval(j), " -> ")
          indice := partenza(j)
          pvalmax := pval(j)                              ! Si aggiorna pvalmax quando viene superato da un nuovo item
        end-if
      end-do
      ! write(" Scelgo ", indice," -> ")
      ! Esistono situazioni in cui abbiamo item disponibili ma nessuno può essere scelto (ad esempio se nessuno è una partenza)
      ! In questi casi è previsto un secondo criterio: l'item il cui peso satura al massimo la capacità del bin corrente.
      if (indice = 0) then                                ! Indice vale 0 solo se non è stato selezionato nessun item
        ! write( "Valutiamo la capacità residua -> ")
        pesomax := 0
        forall (i in items) do
          ! Attraverso il confronto selezioniamo l'item che saturi al meglio il bin corrente
          if(disp(i) = 1 and sel(i) = 0 and pesi(i) > pesomax and pesi(i) < cap) then
            ! 1) L'item deve essere disponibile
            ! 2) L'item non deve essere già selezionato
            ! 3) L'item deve pesare più di pesomax
            ! 4) Il peso dell'item non deve eccedere la capacità del bin
            indice := i
            pesomax := pesi(i)
          end-if
        end-do
      end-if
      ! Se ancora una volta nessun item soddisfa le condizioni si passa a scegliere semplicemente quello dal peso maggiore
      if(indice = 0) then
        ! write( "Valutiamo il peso -> ")
        pesomax := 0
        forall (i in items) do
          ! Attraverso il confronto selezioniamo l'item con il peso maggiore
          if(disp(i) = 1 and sel(i) = 0 and pesi(i) > pesomax) then
            ! 1) L'item deve essere disponibile
            ! 2) L'item non deve essere già selezionato
            ! 3) L'item deve pesare più di pesomax
            indice := i
            pesomax := pesi(i)
          end-if
        end-do
      end-if
      ! La restante parte del codice equivale all'euristico costruttivo RANDOM
      if (pesi(indice) <= cap) then
        cap -= pesi(indice)
      else
        zeur := zeur + 1
        cap := c - pesi(indice)
      end-if
      ! writeln("Assegno a bin: ", zeur, " (capacità residua: ", cap,")")
      sel(indice) := 1
      disp(indice) := 0
      xeur(indice) := zeur
      repeat
        if (not hodisp) then
          zeur += 1
          cap := c
        end-if
        forall (i in items) do
          controllati(i) := 0
          nok(i):= 0
        end-do
        forall(i in archi) do
          if (sel(arrivo(i)) = 0 and sel(partenza(i)) = 1 and nok(arrivo(i)) = 0) then
            controllati(arrivo(i)) := 1
            forall (j in bins) do
              if (xeur(partenza(i)) = j and zeur - pval(i) - j < 0) then
                nok(arrivo(i)) := 1
                break
              elif (xeur(partenza(i)) < j) then
                break
              end-if
            end-do
          else
            nok(arrivo(i)) := 1
          end-if
        end-do
        hodisp := false
        forall (i in items) do
          if (controllati(i) = 1 and sel(i) = 0 and nok(i) = 0) then
            disp(i) := 1
          end-if
          if(sel(i) = 0) then
            fine := false
            if (disp(i) = 1 and pesi(i) < cap) then
              hodisp := true
            end-if
          end-if
        end-do
        if (fine) then
          hodisp := true
        end-if
      until hodisp or fine
    until fine
    t2 := gettime
    writeln ("°°°°°°°°° EURISTICO CON PVAL °°°°°°°°°")
    writeln ("\ttempo impiegato = ", t2 - t1)
    writeln("\tzeur = ",zeur)
    forall (b in 1..zeur) do
      writeln("\tbin = ", b)
      forall (i in items) do
        if (xeur(i) = b) then
          writeln("\t\tItem: ", i," (peso  = ", pesi(i),")")
        end-if
      end-do
    end-do
  end-procedure

  procedure BPPGP_LS
    declarations
      disp, sel, controllati, nok: array(items) of integer
      indice, cap, pvalmax, pesomax : integer
      fine, hodisp : boolean
      ndisp : integer                                       ! Numero di item a disponibili per la selezione
      swap : integer                                        ! Indice dell'item con cui sostituire il selezionato
    end-declarations
    t1 := gettime
    zeur := 1
    fine := false
    forall(i in items) do
      sel(i) := 0
      disp(i) := 1
      xeur(i):= 0
    end-do
    forall(i in archi) do
      disp(arrivo(i)) := 0
    end-do
    ndisp := 0
    forall (i in items) do
      if (disp(i) = 1) then
        ndisp += 1
      end-if
    end-do
    cap := c
    while (not fine) do
      fine := true
      indice := 0
      pvalmax := -1
      forall (j in archi) do
        if (disp(partenza(j)) = 1 and sel(partenza(j)) = 0 and pval(j) > pvalmax) then
          ! write ("indice = " ,i, ", pval = ", pval(j), " -> ")
          indice := partenza(j)
          pvalmax := pval(j)
        end-if
      end-do
      ! if (indice <> 0) then
        ! write ("sel ",indice," -> ")
      ! end-if
      if (indice = 0) then
        pesomax := 0
        forall (i in items) do
          if(disp(i) = 1 and sel(i) = 0 and pesi(i) > pesomax and pesi(i) < cap) then
            indice := i
            pesomax := pesi(i)
          end-if
        end-do
        ! if (indice <> 0) then
          ! write ("CR ", indice," -> ")
        ! end-if
      end-if
      if(indice = 0) then
        pesomax := 0
        forall (i in items) do
          if(disp(i) = 1 and sel(i) = 0 and pesi(i) > pesomax) then
            indice := i
            pesomax := pesi(i)
          end-if
        end-do
        ! write( "p -> ",indice," -> ")
      end-if
      ! Lo SWAP avviene dopo la selezione "con criterio" dell'item
      if(random < 0.5 and ndisp > 1) then                                 ! Lo SWAP avviene con una certa probabilità e solo se esistono altri item disponibili
        while (true) do
          swap := ceil(random * n)
          ! Il nuovo item viene selezionato random tra i disponibili e deve essere diverso da quello che era stato scelto
          if(disp(swap) = 1 and sel(swap) = 0 and swap <> indice) then
            indice := swap                                                ! Indice viene aggiornato
            ! write ("SWAP = ",indice , " -> ")
            break
          end-if
        end-do
      end-if
      if (pesi(indice) <= cap) then
        cap -= pesi(indice)
      else
        zeur := zeur + 1
        cap := c - pesi(indice)
      end-if
      ! writeln("bin: ", zeur, " (c_res: ", cap,")")
      ndisp -= 1
      sel(indice) := 1
      disp(indice) := 0
      xeur(indice) := zeur
      repeat
        if (not hodisp) then
          zeur += 1
          cap := c
        end-if
        forall (i in items) do
          controllati(i) := 0
          nok(i):= 0
        end-do
        forall(i in archi) do
          if (sel(arrivo(i)) = 0 and sel(partenza(i)) = 1 and nok(arrivo(i)) = 0) then
            controllati(arrivo(i)) := 1
            forall (j in bins) do
              if (xeur(partenza(i)) = j and zeur - pval(i) - j < 0) then
                nok(arrivo(i)) := 1
                break
              elif (xeur(partenza(i)) < j) then
                break
              end-if
            end-do
          else
            nok(arrivo(i)) := 1
          end-if
        end-do
        hodisp := false
        forall (i in items) do
          if (controllati(i) = 1 and sel(i) = 0 and nok(i) = 0 and disp(i) = 0) then
            disp(i) := 1
            ndisp += 1
            ! write(i," dd -> ")
          end-if
          if(sel(i) = 0) then
            fine := false
            if (disp(i) = 1 and pesi(i) < cap) then
              hodisp := true
            end-if
          end-if
        end-do
        if (fine) then
          hodisp := true
        end-if
      until hodisp or fine
    end-do
    t2 := gettime
    tsingolo:= t2-t1
    ! writeln ("------------ LOCAL SEARCH ------------")
    ! writeln ("\ttempo impiegato = ", t2 - t1)
    ! writeln("\tzeur = ", zeur)
    ! forall (b in 1..zeur) do
    !   writeln("\tbin = ", b)
    !   forall (i in items) do
    !     if (xeur(i) = b) then
    !       writeln("\t\tItem: ", i," (peso  = ", pesi(i),")")
    !     end-if
    !   end-do
    ! end-do
  end-procedure

  procedure BPPGP_GRASP
    declarations
      disp, sel, controllati, nok: array(items) of integer
      fine, hodisp : boolean
      cap, closest, indice, pvalmax, swap : integer
      crit: integer                                           ! criterio modificabile per il grasp
      clist : array(items) of integer                         ! candidate List del GRASP
    end-declarations
    t1 := gettime
    forall(i in items) do
      sel(i) := 0
      disp(i) := 1
      xeur(i):= 0
    end-do
    forall(i in archi) disp(arrivo(i)) := 0
    cap := c
    zeur := 1
    crit := 1
    repeat
      fine := true
      forall (i in items) clist(i) := 0
      pvalmax := 0
      !Si vuole individuare il valore massimo sugli archi di precedenza uscenti dagli item disponibili
      forall (j in archi) do
        ! aggiorniamo una variabile pvalmax che trovi il massimo dei pval
        if(pval(j) > pvalmax and disp(partenza(j)) = 1 and sel(partenza(j)) = 0 ) then
          ! 1) Il valore di pval dell'arco j deve essere maggiore rispetto a quello di pvalmax
          ! 2) L'item partenza(j) deve essere disponibile
          ! 3) L'item partenza(j) non deve essere selezionato
          pvalmax := pval(j)
        end-if
      end-do
      ! Se (pvalmax - crit) è maggiore di 0 inseriamo nella candidate list tutti gli item (disponibili) da cui parte un arco con valore di
      ! precedenza maggiore a (pvalmax - crit)
      if ((pvalmax - crit) >= 0) then
        forall (j in archi) do
          if (pval(j) >= (pvalmax - crit) and disp(partenza(j)) = 1 and sel(partenza(j)) = 0) then
            clist(partenza(j)) := 1
          end-if
        end-do
      else
      ! Se (pmax - crit) < 0 mettiamo tutti i disponibili nella candidate list
        forall(i in items) do
          if(disp(i) = 1) then
            clist(i) := 1
          end-if
        end-do
      end-if
      ! selezioniamo un item casuale presente nella candidate list
      indice := ceil(random * n)
      closest := n + 1
      forall (i in items) do
        if (clist(i) = 1 and sel(i) = 0 and indice - i < closest) then
          closest := indice - i
          indice := i
        end-if
        if (clist(i) = 1 and indice - i >= closest) then
          break
        end-if
      end-do
      ! write("Seleziono ", indice, " -> ")
      if (pesi(indice) <= cap) then
        cap -= pesi(indice)
      else
        zeur := zeur + 1
        cap := c - pesi(indice)
      end-if
      ! writeln("bin: ", zeur, " (c res: ", cap,")")
      sel(indice) := 1
      disp(indice) := 0
      xeur(indice) := zeur
      repeat
        if (not hodisp) then
          zeur += 1
          cap := c
        end-if
        forall (i in items) do
          controllati(i) := 0
          nok(i):= 0
        end-do
        forall(i in archi) do
          if (sel(arrivo(i)) = 0 and sel(partenza(i)) = 1 and nok(arrivo(i)) = 0) then
            controllati(arrivo(i)) := 1
            forall (j in bins) do
              if (xeur(partenza(i)) = j and zeur - pval(i) - j < 0) then
                nok(arrivo(i)) := 1
                break
              elif (xeur(partenza(i)) < j) then
                break
              end-if
            end-do
          else
            nok(arrivo(i)) := 1
          end-if
        end-do
        hodisp := false
        forall (i in items) do
          if (controllati(i) = 1 and sel(i) = 0 and nok(i) = 0) then
            disp(i) := 1
          end-if
          if(sel(i) = 0) then
            fine := false
            if (disp(i) = 1 and pesi(i) < cap) then
              hodisp := true
            end-if
          end-if
        end-do
        if (fine) then
          hodisp := true
        end-if
      until hodisp or fine
    until fine
    t2 := gettime
    ! writeln("@@@@@@@@ GRASP @@@@@@@@")
    ! tsingolo := t2-t1
    ! writeln ("\ttempo impiegato = ", t2 - t1)
    ! writeln("\tzeur = ",zeur)
    ! forall (b in 1..zeur) do
    !   writeln("\tbin = ", b)
    !   forall (i in items) do
    !     if (xeur(i) = b) then
    !       writeln("\t\tItem: ", i," (peso  = ", pesi(i),")")
    !     end-if
    !   end-do
    ! end-do
  end-procedure

  procedure BPPGP_Multistart
  declarations
    t_1,t_2: real
  end-declarations
    t_1 := gettime
    zbest := zeur
    xbest := xeur
    ! write("iter: 0 zeur = ", zeur," -> ")
    forall (iterazione in 1..max_iter) do
      ! BPPGP_random
      BPPGP_random_migliorato
      ! BPPGP_LS
      BPPGP_GRASP
      tempo += tsingolo
      if(zeur < zbest) then                     ! Se la soluzione dell'euristico è migliore dell'incumbet si aggiorna
        ! write("iter: ", iterazione," zeur = ", zeur," -> ")
        zbest := zeur
        xbest := xeur
      end-if
    end-do
    ! writeln("")
    t_2 := gettime
    writeln ("%%%%%%%%%%% MULTISTART %%%%%%%%%%%%")
    writeln ("\ttempo medio = ", tempo / max_iter)
    writeln ("\ttempo tot= ", t_2-t_1)
    writeln ("\tzbest = ", zbest)
    ! forall (b in 1..zeur) do
    !   writeln("\tbin = ", b)
    !   forall (i in items) do
    !     if (xeur(i) = b) then
    !       writeln("\t\tItem: ", i," (peso  = ", pesi(i),")")
    !     end-if
    !   end-do
    ! end-do
  end-procedure

  procedure BPPGP_Rappresentazione_Grafica
    declarations
      cont: integer
    end-declarations
    svgaddgroup("b", "Bins", SVG_GRAY)
    svgsetstyle("b", SVG_STROKE, SVG_BLACK)
    svgsetstyle("b", SVG_STROKEWIDTH, 0.05)
    svgsetstyle("b", SVG_FILL, SVG_GRAY)
    svgaddgroup("i", "Items euristico", SVG_LIME)
    svgsetstyle("i", SVG_STROKE, SVG_BLACK)
    svgsetstyle("i", SVG_STROKEWIDTH, 0.05)
    svgsetstyle("i", SVG_FILL, SVG_LIME)
    svgaddgroup("o", "Items modello", SVG_YELLOW)
    svgsetstyle("o", SVG_STROKE, SVG_BLACK)
    svgsetstyle("o", SVG_STROKEWIDTH, 0.05)
    svgsetstyle("o", SVG_FILL, SVG_YELLOW)
    svgsetgraphviewbox(0,0,8,c + 1)
    svgsetgraphlabels("Bins", "Capacity")
    
    ! Da utilizzare per le soluzioni euristiche
    ! forall (b in 1..(zeur+1)) do
    !   cont := 0
    !   svgaddrectangle("b", (b-1), 0, 1, c)
    !   forall (i in items) do
    !     if (xeur(i) = b) then
    !       ! writeln("bin: ", b," item: ", i," (peso  = ", pesi(i),")")
    !       svgaddrectangle("i", (b-1), cont, 1, pesi(i))
    !       cont += pesi(i)
    !     end-if
    !   end-do
    ! end-do
    
    ! Da utilizzare per il modello matematico
    forall(b in 1..m) do
      if (getsol(y(b)) > eps) then
        ! writeln("\ty(", b, ") = ",getsol(y(b)))
        svgaddrectangle("b", (b-1), 0, 1, c)
        cont := 0
        forall(i in items)
          if (getsol(x(b, i)) > eps) then
            ! writeln("\t\tx(",b,", ", j, ") = ", getsol(x(i,j)))
            svgaddrectangle("o", (b-1), cont, 1, pesi(i))
            cont += pesi(i)
            
          end-if
      end-if
    end-do
    svgrefresh
    svgwaitclose
  end-procedure

  procedure Print_Status
    !restituisce lo stato del problema e quindi la natura della soluzione ottenuta
    case getprobstat of
      XPRS_OPT: solution_status:="Optimum found"
      XPRS_UNF: solution_status:="Unfinished"
      XPRS_INF: solution_status:="Infeasible"
      XPRS_UNB: solution_status:="Unbounded"
      XPRS_OTH: solution_status:="Failed"
      else solution_status:="???"
    end-case
    writeln("Problem status: ", solution_status)
  end-procedure

end-model
